# .github/workflows/ci.yml

name: CI Pipeline

# This workflow runs on pushes to the 'main' branch and on pull requests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # This job tests the backend
  test-backend:
    # Use the latest version of Ubuntu to run the job
    runs-on: ubuntu-latest

    # Specify the default working directory for all steps in this job
    defaults:
      run:
        working-directory: ./go-backend

    # Define the steps for this job
    steps:
      # 1. Check out the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up a modern and stable version of Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Use a modern Go version that matches what your linter was built with
          go-version: '1.22.4' 
          cache-dependency-path: go-backend/go.sum

      # 3. Display Go version for debugging
      - name: Display Go version
        run: go version

      # 4. Install project dependencies
      - name: Install Dependencies
        run: go mod tidy

      # 5. Manually install the LATEST version of golangci-lint
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.59.1
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      # 6. Run the linter
      - name: Run linter
        run: golangci-lint run ./...
  # This job tests the frontend
  test-frontend:
    # Use the latest version of Ubuntu to run the job
    runs-on: ubuntu-latest

    # Define the steps for this job
    steps:
      # 1. Check out the code from your repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up the Node.js language environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a recent Node.js LTS version
          cache: 'npm'
          cache-dependency-path: next-frontend/package-lock.json # Use your folder name

      # 3. Install dependencies
      - name: Install Dependencies
        run: npm ci
        working-directory: ./next-frontend # Use your folder name

      # 4. Run the linter
      - name: Run Linter
        run: npm run lint
        working-directory: ./next-frontend

      # 5. Run the build command to ensure it compiles
      - name: Build Project
        run: npm run build
        working-directory: ./next-frontend
